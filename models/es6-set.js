// ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值
// Set 本身是一个构造函数，用来生成 Set 数据结构。
// const s = new Set();

// [2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));

// for (let i of s) {
//   console.log(i);
// }
// 2 3 5 4

// 上面代码通过add方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。
// Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。

const set = new Set([1, 2, 3, 4, 4]);
console.log([...set])

/**
 * Set 实例的属性和方法
 * 
 * Set 结构的实例有以下属性。
 * -Set.prototype.constructor：构造函数，默认就是Set函数。
 * -Set.prototype.size：返回Set实例的成员总数。
 * 
 * Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。
 * -add(value)：添加某个值，返回Set结构本身。
 * -delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
 * -has(value)：返回一个布尔值，表示该值是否为Set的成员。
 * -clear()：清除所有成员，没有返回值。
 * 
 * Set 结构的实例有四个遍历方法，可以用于遍历成员。
 * -keys()：返回键名的遍历器
 * -values()：返回键值的遍历器
 * -entries()：返回键值对的遍历器
 * -forEach()：使用回调函数遍历每个成员
 */ 


/**
 * map
 * Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，
 * 各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，
 * Map结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。
 */  

const map = new Map();

map.set(['a'], 555);
map.get(['a']) // undefined
// 上面代码的set和get方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。


/**
 * 实例的属性和操作方法 
 * -size属性返回 Map 结构的成员总数。
 * -set(key, value)方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。
 * -get方法读取key对应的键值，如果找不到key，返回undefined。
 * -clear方法清除所有成员，没有返回值。
 * 
 * 遍历方法
 * -keys()：返回键名的遍历器。
 * -values()：返回键值的遍历器。
 * -entries()：返回所有成员的遍历器。
 * -forEach()：遍历 Map 的所有成员。
 * 需要特别注意的是，Map 的遍历顺序就是插入顺序。
 */ 

//  Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。